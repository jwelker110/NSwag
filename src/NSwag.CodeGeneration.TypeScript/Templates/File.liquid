/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v{{ ToolchainVersion }} (http://NSwag.org)
//     Typescript template customized to pass empty strings for null Query Params instead of 'null' as a string.
//     Track issue here https://github.com/RicoSuter/NSwag/issues/1830
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

{{ ExtensionCodeImport -}}
{% if ImportRequiredTypes -%}
{%     if GenerateClientClasses -%}
{%         if Framework.IsAngular -%}

{%             if Framework.UseRxJs5 -%}
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
{%             else -%}
import { mergeMap as {{ Framework.RxJs.ObservableMergeMapMethod }}, catchError as {{ Framework.RxJs.ObservableCatchMethod }} } from 'rxjs/operators';
import { Observable, {% if UseTransformOptionsMethod %}from as {{ Framework.RxJs.ObservableFromMethod }}, {% endif %}throwError as {{ Framework.RxJs.ObservableThrowMethod }}, of as {{ Framework.RxJs.ObservableOfMethod }} } from 'rxjs';
{%             endif -%}
import { Injectable, Inject, Optional, {{ Framework.Angular.InjectionTokenType }} } from '@angular/core';
{%             if Framework.Angular.UseHttpClient -%}
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
{%             else -%}
import { Http, Headers, ResponseContentType, Response{% if UseTransformOptionsMethod %}, RequestOptionsArgs{% endif %} } from '@angular/http';
{%             endif -%}
{%         endif -%}
{%         if Framework.IsAurelia -%}

import { inject } from 'aurelia-framework';
import { HttpClient, RequestInit } from 'aurelia-fetch-client';
{%         endif -%}
{%         if Framework.IsAngularJS -%}

import * as ng from 'angular';
{%         endif -%}
{%         if Framework.IsAxios -%}

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
{%         endif -%}
{%         if Framework.IsKnockout -%}

import * as ko from 'knockout';
{%         endif -%}
{%         if Framework.IsJQuery -%}

import * as jQuery from 'jquery';
{%         endif -%}
{%     endif -%}
{%     if Framework.UseMomentJS -%}

import * as moment from 'moment';
{%         if RequiresMomentJSDuration -%}
import 'moment-duration-format';
{%         endif -%}
{%     endif -%}
{% endif -%}

{% if HasModuleName -%}
{% if ExportTypes %}export {% endif %}module {{ ModuleName }} {
{% endif -%}
{% if HasNamespace -%}
namespace {{ Namespace }} {
{% endif -%}
{% if GenerateClientClasses and Framework.IsAngular -%}
{% if ExportTypes %}export {% endif %}const {{ Framework.Angular.BaseUrlTokenName }} = new {{ Framework.Angular.InjectionTokenType }}{% if Framework.Angular.InjectionTokenType == "InjectionToken" %}<string>{% endif %}('{{ Framework.Angular.BaseUrlTokenName }}');

{% endif -%}
{{ ExtensionCodeTop }}

{{ Clients }}

{{ Types }}

/**
 *  Enum helpers
 */
export type EnumType = {[key: string | number]: string | number};
export type EnumKey = [keyof EnumType];

export function getReadableEnumValue(value: EnumKey, forEnum: EnumType): string {
    if (typeof value === 'number' && forEnum[value] !== undefined) {
        return splitCamelCase(forEnum[value], true);
    }
    return splitCamelCase(value, true);
}

/**
 * Use this to check whether two values are equally valid for the same enum.
 *
 * enum MyEnum {
 *     Chocolate = 0,
 *     Vanilla = 1,
 *     Strawberry = 2
 * }
 *
 * const value1 = 'chocolate';                        // notice the lowercase here
 * const value2 = 0;                                  // notice this is the numerical representation
 * const value3 = 'Chocolate';                        // notice the uppercase here
 *
 * areEnumValuesEqual(value1, value2, MyEnum)         // will return true
 * areEnumValuesEqual(value1, value3, MyEnum)         // will return true
 * areEnumValuesEqual(value2, value3, MyEnum)         // will return true
 *
 * @param value1
 * @param value2
 * @param forEnum
 */
export function areEnumValuesEqual(value1: EnumKey, value2: EnumKey, forEnum: EnumType) {
    return getReadableEnumValue(value1, forEnum) === getReadableEnumValue(value2, forEnum);
}

export function splitCamelCase(value: string, capitalizeFirst: boolean = true): string {
    if (!value) {
        return value;
    }
    let result = value                                      // "ToGetYourGEDInTimeASongAboutThe26ABCsIsOfTheEssenceButAPersonalIDCardForUser456ContainingABC26TimesIsNotAsEasyAs123"
        .replace(/([a-z])([A-Z][a-z])/g, '$1 $2')           // "To Get YourGEDIn TimeASong About The26ABCs IsOf The Essence ButAPersonalIDCard For User456ContainingABC26Times IsNot AsEasy As123"
        .replace(/([A-Z][a-z])([A-Z])/g, '$1 $2')           // "To Get YourGEDIn TimeASong About The26ABCs Is Of The Essence ButAPersonalIDCard For User456ContainingABC26Times Is Not As Easy As123"
        .replace(/([a-z])([A-Z]+[a-z])/g, '$1 $2')          // "To Get Your GEDIn Time ASong About The26ABCs Is Of The Essence But APersonal IDCard For User456ContainingABC26Times Is Not As Easy As123"
        .replace(/([A-Z]+)([A-Z][a-z][a-z])/g, '$1 $2')     // "To Get Your GEDIn Time A Song About The26ABCs Is Of The Essence But A Personal ID Card For User456ContainingABC26Times Is Not As Easy As123"
        .replace(/([a-z]+)([A-Z0-9]+)/g, '$1 $2')           // "To Get Your GEDIn Time A Song About The 26ABCs Is Of The Essence But A Personal ID Card For User 456Containing ABC26Times Is Not As Easy As 123"
        // Note: the next regex includes a special case to exclude plurals of acronyms, e.g. "ABCs"
        .replace(/([A-Z]+)([A-Z][a-rt-z][a-z]*)/g, '$1 $2') // "To Get Your GED In Time A Song About The 26ABCs Is Of The Essence But A Personal ID Card For User 456Containing ABC26Times Is Not As Easy As 123"
        .replace(/([0-9])([A-Z][a-z]+)/g, '$1 $2')          // "To Get Your GED In Time A Song About The 26ABCs Is Of The Essence But A Personal ID Card For User 456 Containing ABC26 Times Is Not As Easy As 123"
        .replace(/([A-Z]+)([0-9]+)/g, '$1 $2')              // "To Get Your GED In Time A Song About The 26ABCs Is Of The Essence But A Personal ID Card For User 456 Containing ABC 26 Times Is Not As Easy As 123"
        .replace(/([0-9]+)([A-Z]+)/g, '$1 $2')              // "To Get Your GED In Time A Song About The 26 ABCs Is Of The Essence But A Personal ID Card For User 456 Containing ABC 26 Times Is Not As Easy As 123"
        .trim();

    // capitalize the first letter
    return capitalizeFirst ? result.charAt(0).toUpperCase() + result.slice(1) : result;

}

{% if WrapResponses and GenerateResponseClasses -%}
{%     for responseClassName in ResponseClassNames -%}
{% if ExportTypes %}export {% endif %}class {{ responseClassName }}<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;
        
    constructor(status: number, headers: { [key: string]: any; }, result: TResult) 
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

{%     endfor -%}
{% endif -%}
{% if RequiresFileParameterInterface -%}
{% if ExportTypes %}export {% endif %}interface FileParameter {
    data: any;
    fileName: string;
}

{% endif -%}
{% if RequiresFileResponseInterface -%}
{% if ExportTypes %}export {% endif %}interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

{% endif -%}
{% if RequiresSwaggerExceptionClass -%}
{% if ExportTypes %}export {% endif %}class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

{% endif -%}
{% if GenerateClientClasses -%}
{% template File.Utilities %}
{% endif -%}

{{ ExtensionCodeBottom }}
{% if HasNamespace -%}
}
{% endif -%}
{% if HasModuleName -%}
}
{% endif -%}
